[{"content":"之前在平台上写博文，写完发布拉倒。现在自己建站，虽然自由了些，但牵扯到hugo、github提交和发布，麻烦了点，现在把流程规范和记录下来。\n1. 创建博文目录 goblog # alias命令，cd到博客所在的git仓库 # 新建博文markdown # 规范：posts/年份/博文标题目录/index.md -》最中路径在content下 # 年份是便于分类，博文标题做目录是为了让图片和md文件在一块，标题用英文，在url上好看些，md文档的front matter 的title字段可定义中文标题 hugo new posts/2023/博文标题/index.md 2. 使用 wolai + typora 编辑md文件 使用wolai编辑正文，使用 typora 编辑front matter和查看图片引用是否正常\n使用 wolai 编辑正文，然后以md格式导出，将该文件与上述index.md文件合并 使用 typora 打开文件并编辑： open -a typora content/posts/2023/博文标题/index.md 编辑front matter：\n注意编辑标题、分类、tag等， draft 改为 false， slug 是博文 url 的最后字段，如果为空默认就用当前目录，slug会默认做转换：将所有字母转换为小写字母，「-」替换空格，删除所有特殊字符 另外，还要在typora中设置「图片复制到./assets文件夹」\n3. 本地预览 写完后，可用以下命令预览，其中 -D 是显示草稿文章。\nhugo server -D 4. 提交到github # 一般情况下 git add -A git cm -m \u0026#34;添加博文xx\u0026#34; git push origin master # 可能需要代理 提交后，会激活github action自动发布，稍后即可在 tubaozi.top 看到了。\n5. 备份(不用了 2 中实际已经备份了) 将md文件导入到 wolai: -\u0026gt; Life/个人博客tubaozi.top/博文备份 下\n","permalink":"http://tubaozi.top/posts/2023/blog_write_best_practices/","summary":"之前在平台上写博文，写完发布拉倒。现在自己建站，虽然自由了些，但牵扯到hugo、github提交和发布，麻烦了点，现在把流程规范和记录下来。\n1. 创建博文目录 goblog # alias命令，cd到博客所在的git仓库 # 新建博文markdown # 规范：posts/年份/博文标题目录/index.md -》最中路径在content下 # 年份是便于分类，博文标题做目录是为了让图片和md文件在一块，标题用英文，在url上好看些，md文档的front matter 的title字段可定义中文标题 hugo new posts/2023/博文标题/index.md 2. 使用 wolai + typora 编辑md文件 使用wolai编辑正文，使用 typora 编辑front matter和查看图片引用是否正常\n使用 wolai 编辑正文，然后以md格式导出，将该文件与上述index.md文件合并 使用 typora 打开文件并编辑： open -a typora content/posts/2023/博文标题/index.md 编辑front matter：\n注意编辑标题、分类、tag等， draft 改为 false， slug 是博文 url 的最后字段，如果为空默认就用当前目录，slug会默认做转换：将所有字母转换为小写字母，「-」替换空格，删除所有特殊字符 另外，还要在typora中设置「图片复制到./assets文件夹」\n3. 本地预览 写完后，可用以下命令预览，其中 -D 是显示草稿文章。\nhugo server -D 4. 提交到github # 一般情况下 git add -A git cm -m \u0026#34;添加博文xx\u0026#34; git push origin master # 可能需要代理 提交后，会激活github action自动发布，稍后即可在 tubaozi.","title":"博文写作和发布最佳实践"},{"content":"一直想着建个自己的网站，顺便折腾点主题。前几天突发奇想注册了这个域名。顺手也把网站搭起来。调研了现在静态博客的情况，之前印象中的流行框架 HEXO 已然被 Hugo 盖住了风头。学习了下 Hugo，够简单，功能也够丰富。虽然网上 Hugo 搭建指南一大把，但我还是记录一下自己的使用过程，也作为第一篇正式博文。\n你可以在这篇博客中了解到：\nHugo 搭建静态博客方法 利用 github pages 托管网页 利用 github action 自动发布网页 一些建站过程中的 tips 安装Hugo Hugo的官网是https://gohugo.io/，另外有个中文文档网站https://gohugo.org/也可以参考。\n官方推荐了很多安装方式，但我觉得直接下载二进制文件最为方便(升级需要手动)，Hugo有标准版、扩展版两个版本，扩展版支持对 WebP 图像进行编码和使用嵌入式 LibSass 转译器将 Sass 转译到 CSS，官方也推荐使用扩展版。\n下载后，放到对应路径，添加到 PATH 环境变量，更方便使用。安装完后，使用以下命令进行验证：\nhugo version 使用Hugo 生成站点 即在指定路径下生成名为 sitename 的文件夹\nhugo new site /path/to/sitename 站点目录结构：\n▸ archetypes/ ▸ content/ ▸ layouts/ ▸ static/ config.toml 创建文章 在content文件夹下新建posts文件夹并新建xx.md文档\nhugo new posts/xx.md 默认生成的 xx.md 内容和解释如下：\ntitle: \u0026#34;xx\u0026#34; # 网站显示的文章名字，可以与文件名不同 date: 2021-08-19T15:04:55+08:00 draft: true # 是否为草稿 # 下面两个默认没有，需要自己加 categories: [\u0026#34;互联网\u0026#34;] # 文章分类 tags: [\u0026#34;Hugo\u0026#34;, \u0026#34;Github Pages\u0026#34;, \u0026#34;Github Actions\u0026#34;, \u0026#34;CI/CD\u0026#34;] # 文章标签 一般情况下，我们都要新建这些文件构建网站的骨架：\nabout.md archives.md search.md category.md 我一般会用文件夹组织 content 内的博文，比如我在posts下新建年份目录(2023/)进行归类，便于查找管理\n使用主题 可以去这里下载相关主题，并解压到theme目录下。我个人比较喜欢 PaperMod 主题，然后参考Cassius\u0026rsquo;s Blog进行了魔改。除了下载也可以 git clone，或者 git submodule 便于更新主题。\n使用主题需要在hugo.toml中添加theme: PaperMod才能启用\n运行Hugo 在你的站点根目录执行 Hugo 命令进行调试：\nhugo server -D --theme=PaperMod -D 是显示草稿文章，\u0026ndash;theme 是自行指定主题。然后打开 localhost:1313 就能欣赏自己的网站了。\n如果没问题，可以执行发布命令，发布正式网站内容到public目录：\nhugo hugo.yml 展示 hugo.yml做了很多配置，我的如下：\nbaseURL: \u0026#34;http://tubaozi.top/\u0026#34; title: 今是昨非 | 技术.生活.阅读.思考 paginate: 10 theme: PaperMod languageCode: zh defaultContentLanguage: zh enableInlineShortcodes: true enableRobotsTXT: true buildDrafts: false buildFuture: true buildExpired: false enableEmoji: true googleAnalytics: G-MZJS5SGFET minify: disableXML: true minifyOutput: true menu: main: - name: 🔎 搜索 url: search/ weight: 9 - name: ⏱️ 时间轴 url: archives weight: 10 - name: ⛩️ 分类 url: categories/ weight: 20 - name: 🧩 标签 url: tags/ weight: 30 - name: 🙋🏻‍♂️ 关于 url: about weight: 50 outputs: home: - HTML - RSS - JSON params: env: production # to enable google analytics, opengraph, twitter-cards and schema. description: \u0026#34;个人博客\u0026#34; author: Beeta # author: [\u0026#34;Me\u0026#34;, \u0026#34;You\u0026#34;] # multiple authors # images: /favicon.ico defaultTheme: auto disableThemeToggle: false # ShowShareButtons: true # ShowReadingTime: true # disableSpecial1stPost: true displayFullLangName: true ShowPostNavLinks: true ShowBreadCrumbs: false ShowCodeCopyButtons: true ShowToc: true # home-info mode homeInfoParams: Title: \u0026#34;悟已往之不谏，知来者之可追\u0026#34; Content: \u0026gt; - ✨ 欢迎来到我的个人博客 - 🤔 我在这里分享技术、读书、生活还有思考。 socialIcons: - name: Github url: \u0026#34;https://github.com/Beeta\u0026#34; - name: RSS url: \u0026#34;index.xml\u0026#34; - name: email url: \u0026#34;mailto:zrc199021@163.com\u0026#34; label: # 左上角图标 text: \u0026#34;今是昨非\u0026#34; icon: \u0026#34;img/足迹.png\u0026#34; iconHeight: 35 markup: goldmark: renderer: unsafe: true 配置github actions 一般情况下，直接把public目录内容提交到你的xx.github.io仓库就能访问了。但这样做需要每次都提交一堆内容，比较繁琐。我们可以用 github actions 实现提交自己的 md 文档后自动执行发布的功能。\n原理：发布博文到仓库 -\u0026gt; 触发 actions 执行hugo命令并复制public下内容到指定仓库。\n有的人将博文和发布内容放到两个仓库，我则是发到了统一仓库的两个分支上：master 分支存md 文件，gh-pages 分支放发布后的内容。\ngithub actions 配置如下：\n点击 github 仓库页面Actions进行操作 最终会在仓库下生成.github/workflows目录内部有自己指定的配置文件，如github-pages.yaml。其中secrets.G_T是自己申请的(settings-\u0026gt;Actions secrets and variables-\u0026gt;Actions创建名为secrets.G_T的秘钥)\ngithub-pages.yaml内容如下\nname: GitHub Pages on: push: branches: - master # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.112.1\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/master\u0026#39; }} with: github_token: ${{ secrets.G_T }} publish_dir: ./public tips hugo.toml是最近版本新改的，之前是config.yml，两者都行，甚至hugo.yml也行。我比较习惯yaml语法，所以用最后这个\n每次发布都会重刷 public 里的所有文件，所以一些需要保留的文件需要放到static目录下\n可以在static下放 favicon.ico 文件，再网页标题栏显示图标 github页面展示需要的 CNAME文件也放在这 博客图片也可以放到 static 下，但是我个人习惯 md 文件和图片在同目录下。所以我的方式是每个博文一个文件夹，下面新建index.md作为博文主体。文件夹最好是英文，这样 url 编码好看些。\n生成的文章内部头部配置信息包括一些文章名称，时间之类的信息，可以事先在目录 archetypes/default.md 下使用模板，这样在用命令 hugo new 生成文章后会自动加上模板里的配置\n我的博客代码托管在：https://github.com/Beeta/beeta.github.io\n参考 下面的博客给了我很大帮助:\nhttps://www.yuweihung.com/ https://www.sulvblog.cn/ hugo博客搭建 | PaperMod主题 使用 Hugo+Github Actions 实现自动化部署博客 使用 Hugo 从 0 到 1 搭建个人博客 ","permalink":"http://tubaozi.top/posts/2023/create_blog_with_hugo/","summary":"一直想着建个自己的网站，顺便折腾点主题。前几天突发奇想注册了这个域名。顺手也把网站搭起来。调研了现在静态博客的情况，之前印象中的流行框架 HEXO 已然被 Hugo 盖住了风头。学习了下 Hugo，够简单，功能也够丰富。虽然网上 Hugo 搭建指南一大把，但我还是记录一下自己的使用过程，也作为第一篇正式博文。\n你可以在这篇博客中了解到：\nHugo 搭建静态博客方法 利用 github pages 托管网页 利用 github action 自动发布网页 一些建站过程中的 tips 安装Hugo Hugo的官网是https://gohugo.io/，另外有个中文文档网站https://gohugo.org/也可以参考。\n官方推荐了很多安装方式，但我觉得直接下载二进制文件最为方便(升级需要手动)，Hugo有标准版、扩展版两个版本，扩展版支持对 WebP 图像进行编码和使用嵌入式 LibSass 转译器将 Sass 转译到 CSS，官方也推荐使用扩展版。\n下载后，放到对应路径，添加到 PATH 环境变量，更方便使用。安装完后，使用以下命令进行验证：\nhugo version 使用Hugo 生成站点 即在指定路径下生成名为 sitename 的文件夹\nhugo new site /path/to/sitename 站点目录结构：\n▸ archetypes/ ▸ content/ ▸ layouts/ ▸ static/ config.toml 创建文章 在content文件夹下新建posts文件夹并新建xx.md文档\nhugo new posts/xx.md 默认生成的 xx.md 内容和解释如下：\ntitle: \u0026#34;xx\u0026#34; # 网站显示的文章名字，可以与文件名不同 date: 2021-08-19T15:04:55+08:00 draft: true # 是否为草稿 # 下面两个默认没有，需要自己加 categories: [\u0026#34;互联网\u0026#34;] # 文章分类 tags: [\u0026#34;Hugo\u0026#34;, \u0026#34;Github Pages\u0026#34;, \u0026#34;Github Actions\u0026#34;, \u0026#34;CI/CD\u0026#34;] # 文章标签 一般情况下，我们都要新建这些文件构建网站的骨架：","title":"Hugo 静态博客搭建指南"},{"content":"关于我\n名字: Beeta 位置: 深圳 职业: 在某厂从事数据开发和分析工作 联系: enJjMTk5MDIxQDE2My5jb20= ","permalink":"http://tubaozi.top/about/","summary":"关于我\n名字: Beeta 位置: 深圳 职业: 在某厂从事数据开发和分析工作 联系: enJjMTk5MDIxQDE2My5jb20= ","title":"🙋🏻‍♂️关于"}]